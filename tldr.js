// Generated by CoffeeScript 1.4.0
(function() {
  var Stories, Users, countStories, createStory, currentId, currentMode, doAnim, getStories, getStory, hideMedia, hideNarrative, hidePanel, isEditing, loadStory, populateNarrative, showMedia, showNarrative, showPanel;

  Stories = new Meteor.Collection("stories");

  Users = new Meteor.Collection("users");

  Meteor.startup(function() {
    var id;
    if (Meteor.isClient) {
      id = currentId();
      Session.setDefault('token', id);
      return Meteor.subscribe('stories', function() {
        loadStory(id, function(story) {
          console.log('story loaded', story.url);
          Session.setDefault('story', story);
          return $('.tldr-title').val(story.url);
        });
        if (true === isEditing()) {
          return populateNarrative(id);
        }
      });
    } else if (Meteor.isServer) {
      return Meteor.publish("stories", function() {
        return Stories.find({}, {
          fields: {
            _id: 1,
            token: 1,
            modified: 1,
            narratives: 1,
            url: 'https://s3.amazonaws.com/hazy.co/sky.mov'
          }
        });
      });
    }
  });

  currentId = function() {
    return document.location.pathname.replace(/^\//, '');
  };

  currentMode = function() {
    return document.location.hash.replace(/^#/, '');
  };

  getStories = function() {
    return Stories.find().fetch();
  };

  countStories = function() {
    return Stories.find().fetch().length;
  };

  loadStory = function(id, fn) {
    var story;
    story = getStory(id);
    if (null === story) {
      story = createStory(id);
    }
    if ('function' === typeof fn) {
      fn(story);
    }
    return story;
  };

  getStory = function(id) {
    var story;
    story = Stories.find({
      token: id
    }).fetch();
    if ('undefined' === typeof story) {
      story = null;
    } else if (null !== story) {
      story = story[0] || null;
    }
    return story;
  };

  createStory = function(id) {
    var story;
    story = Stories.insert({
      token: id,
      modified: new Date(),
      url: 'https://s3.amazonaws.com/hazy.co/sky.mov',
      narratives: []
    });
    if ('undefined' === typeof story) {
      story = null;
    } else {
      story = Stories.find({
        token: id
      }).fetch()[0];
    }
    return story;
  };

  populateNarrative = function(id) {
    return console.log('get narrative', id);
  };

  if (Meteor.isClient) {
    isEditing = function() {
      return 'edit' === currentMode();
    };
    doAnim = function(node, prop, fn) {
      return $(node).animate(prop, {
        duration: 300,
        specialEasing: {
          width: 'linear',
          height: 'easeOutBounce'
        },
        complete: function() {
          if ('function' === typeof fn) {
            return fn();
          }
        }
      });
    };
    hidePanel = function() {
      var node;
      node = $("#tldr-panel-container");
      node.hide();
      return doAnim(node, {
        'margin-right': '-1000px'
      }, function() {
        return $('.tldr-button-edit-cancel').addClass('tldr-button-edit').removeClass('tldr-button-edit-cancel').removeClass('ss-writingdisabled').addClass('ss-write');
      });
    };
    showPanel = function() {
      var node;
      node = $("#tldr-panel-container");
      node.show();
      return doAnim(node, {
        'margin-right': '0px'
      }, function() {
        return $('.tldr-button-edit').removeClass('tldr-button-edit').addClass('tldr-button-edit-cancel').addClass('ss-writingdisabled').removeClass('ss-write');
      });
    };
    showNarrative = function() {
      var node;
      node = $("#tldr-narrative-container");
      node.show();
      $("#tldr-panel-container").hide();
      return doAnim(node, {
        'margin-right': '0px'
      }, function() {
        return $('.tldr-button-narrative').removeClass('tldr-button-narrative').addClass('tldr-button-narrative-cancel').text('notebook');
      });
    };
    hideNarrative = function() {
      var node;
      node = $("#tldr-narrative-container");
      node.hide();
      return doAnim(node, {
        'margin-right': '-2000px'
      }, function() {
        return $('.tldr-button-narrative-cancel').addClass('tldr-button-narrative').removeClass('tldr-button-narrative-cancel').text('openbook');
      });
    };
    showMedia = function() {
      var node;
      node = $("#tldr-media-container");
      node.show();
      return doAnim(node, {
        'margin-right': '0px'
      }, function() {
        console.log('nasty');
        return $('.tldr-button-media').removeClass('tldr-button-media').addClass('tldr-button-media-cancel').text('writingdisabled');
      });
    };
    hideMedia = function() {
      var node;
      node = $("#tldr-media-container");
      node.hide();
      return doAnim(node, {
        'margin-right': '-2000px'
      }, function() {
        return $('.tldr-button-media-cancel').addClass('tldr-button-media').removeClass('tldr-button-media-cancel').text('write');
      });
    };
    if (true === isEditing()) {
      Template.controls.events({
        "click .tldr-button-edit": function(e) {
          showPanel();
          hideNarrative();
          return hideMedia();
        }
      });
      Template.controls.events({
        "click .tldr-button-edit-cancel": function(e) {
          return hidePanel();
        }
      });
      Template.controls.events({
        "click .tldr-button-narrative": function(e) {
          showNarrative();
          hidePanel();
          return hideMedia();
        }
      });
      Template.controls.events({
        "click .tldr-button-narrative-cancel": function(e) {
          return hideNarrative();
        }
      });
      Template.controls.events({
        "click .tldr-button-media": function(e) {
          showMedia();
          hideNarrative();
          return hidePanel();
        }
      });
      Template.controls.events({
        "click .tldr-button-media-cancel": function(e) {
          return hideMedia();
        }
      });
      Template.toolbar.events({
        "keydown .tldr-title": function(e) {
          var regex, story, url;
          story = Session.get('story');
          url = $("#tldr-controls-spacer-title").val();
          story.url = url;
          Stories.update({
            _id: Session.get('story')['_id']
          }, story);
          Session.set('story', story);
          regex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi;
          console.log('keydown: ' + url, url.match(regex));
          if (null === url.match(regex)) {
            $('.tldr-controls-spacer-title-icon').css('color', '#660000');
            return $('#tldr-controls-spacer-title').css('color', '#660000');
          } else {
            $('.tldr-controls-spacer-title-icon').css('color', 'rgb(255, 255, 255)');
            return $('#tldr-controls-spacer-title').css('color', 'rgb(255, 255, 255)');
          }
        }
      });
      Template.toolbar.events({
        "focusin .tldr-title": function(e) {
          if ('rgb(204, 204, 204)' === $('.tldr-controls-spacer-title-icon').css('color')) {
            $('.tldr-controls-spacer-title-icon').css('color', 'rgb(255, 255, 255)');
            return $('#tldr-controls-spacer-title').css('color', 'rgb(255, 255, 255)');
          }
        }
      });
      Template.toolbar.events({
        "focusout .tldr-title": function(e) {
          if ('rgb(255, 255, 255)' === $('.tldr-controls-spacer-title-icon').css('color')) {
            $('.tldr-controls-spacer-title-icon').css('color', 'rgb(204, 204, 204)');
            return $('#tldr-controls-spacer-title').css('color', 'rgb(204, 204, 204)');
          }
        }
      });
      Template.narratives.narratives = function() {
        if ('undefined' !== typeof Session.get('story')) {
          return Session.get('story')['narratives'];
        } else {
          return [];
        }
      };
    }
  }

}).call(this);
