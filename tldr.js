// Generated by CoffeeScript 1.4.0
(function() {
  var Stories, Users, countStories, createGrid, createStory, currentId, currentMode, doAnim, getStories, getStory, hideMedia, hideNarrative, hidePanel, hideSettings, isEditing, loadStory, populateNarrative, showMedia, showNarrative, showPanel, showSettings, that, timestampToPrettyDate;

  Stories = new Meteor.Collection("stories");

  Users = new Meteor.Collection("users");

  that = this;

  that.video = null;

  timestampToPrettyDate = function(t) {
    var hours, minutes, remainder, running, seconds;
    running = Math.round(t);
    remainder = running % 3600;
    running = running - (running % 3600);
    hours = (running / 3600).toString();
    hours = hours.toString().length < 2 ? "0" + hours : hours.toString();
    running = remainder;
    remainder = running % 60;
    running = running - (running % 60);
    minutes = (running / 60).toString();
    minutes = minutes.length < 2 ? "0" + minutes : minutes;
    seconds = remainder.toString();
    seconds = seconds.length < 2 ? "0" + seconds : seconds;
    return [hours, minutes, seconds].join(":");
  };

  Meteor.startup(function() {
    var Video, flyouts$, id, media$, media_container$, narrative$, narrative_container$, right$, settings$, settings_container$, tightenUI;
    if (Meteor.isClient) {
      flyouts$ = $("#tldr-flyouts");
      right$ = $("#tldr-right");
      narrative_container$ = $("#tldr-narrative-container");
      narrative$ = $("#tldr-narrative");
      media$ = $("#tldr-media");
      media_container$ = $("#tldr-media-container");
      settings$ = $("#tldr-settings");
      settings_container$ = $("#tldr-settings-container");
      tightenUI = function() {
        var max;
        max = right$.outerHeight() + "px";
        flyouts$.css('max-height', max);
        narrative_container$.css('max-height', max);
        narrative$.css('max-height', max);
        media$.css('max-height', max);
        media_container$.css('max-height', max);
        settings$.css('max-height', max);
        return settings_container$.css('max-height', max);
      };
      tightenUI();
      window.addEventListener('resize', function(e) {
        return tightenUI();
      });
      Video = function(obj) {
        var instance, muted, progress, rate, video;
        video = obj.video;
        muted = obj.muted;
        rate = obj.rate;
        this.onprogress = [];
        this.onplay = [];
        this.onpause = [];
        this.onstop = [];
        if ('function' === typeof obj.progress) {
          this.onprogress.push(obj.progress);
        }
        if ('function' === typeof obj.stop) {
          this.onstop.push(obj.stop);
        }
        if ('function' === typeof obj.pause) {
          this.onpause.push(obj.pause);
        }
        if ('function' === typeof obj.play) {
          this.onplay.push(obj.play);
        }
        progress = obj.progress;
        instance = this;
        this.video = video;
        this.video.defaultMuted = !!muted | false;
        this.video.defaultPlaybackRate = !!rate ? rate : 1;
        this.video.addEventListener('progress', function(e) {
          var buffered, duration, el, location, seekable;
          el = e.srcElement;
          duration = el.duration;
          location = el.currentTime;
          buffered = instance.buffered();
          seekable = instance.seekable();
          return instance._callback(instance.onprogress, [
            {
              duration: duration,
              location: location,
              timeline: instance._timeline(location, duration, buffered, seekable),
              buffered: buffered,
              seekable: seekable
            }
          ]);
        });
        return this;
      };
      Video.prototype.play = function() {
        return this.video.play() && this._callback(this.onplay);
      };
      Video.prototype.pause = function() {
        return this.video.pause() && this._callback(this.onpause);
      };
      Video.prototype.stop = function() {
        return this.video.stop() && this._callback(this.onstop);
      };
      Video.prototype.skip = function(percentage) {
        return this.video.currentTime = this.video.duration * percentage;
      };
      Video.prototype.faster = function() {
        return ++this.video.playbackRate;
      };
      Video.prototype.slower = function() {
        return --this.video.playbackRate;
      };
      Video.prototype.rate = function(r) {
        return this.video.playbackRate = r;
      };
      Video.prototype.mute = function() {
        return this.video.mute = true;
      };
      Video.prototype.unmute = function() {
        return this.video.mute = false;
      };
      Video.prototype.buffered = function() {
        return this._iterateTimeRanges(this.video.buffered);
      };
      Video.prototype.seekable = function() {
        return this._iterateTimeRanges(this.video.seekable);
      };
      Video.prototype.played = function() {
        return this._iterateTimeRanges(this.video.played);
      };
      Video.prototype._timeline = function(location, duration, buffered, seekable) {
        var begin, end, i, last, range, timeline, _i, _len, _results;
        timeline = [];
        last = null;
        _results = [];
        for (range = _i = 0, _len = buffered.length; _i < _len; range = ++_i) {
          i = buffered[range];
          begin = range[0];
          end = range[1];
          if (null !== last) {
            timeline.push([begin - (begin - last), begin]);
          } else {
            timeline.push(range);
            last = end;
          }
          _results.push(timeline);
        }
        return _results;
      };
      Video.prototype._callback = function(stack, args) {
        var fn, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = stack.length; _i < _len; _i++) {
          fn = stack[_i];
          if ('function' === typeof fn) {
            _results.push(fn.apply(this, args));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      Video.prototype._iterateTimeRanges = function(obj) {
        var collection, i, _b, _i, _len;
        collection = [];
        for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
          _b = obj[i];
          collection.push([obj.start(i), obj.end(i)]);
        }
        return collection;
      };
      Video.prototype.media = function() {
        return this.video;
      };
      id = currentId();
      Session.setDefault('token', id);
      return Meteor.subscribe('stories', function() {
        loadStory(id, function(story) {
          var grid, media, videos;
          Session.setDefault('story', story);
          $('.tldr-title').val(story.url);
          grid = createGrid(story.url);
          media = grid.sources();
          videos = media.videos;
          return that.video = new Video({
            video: videos[story.url],
            play: function() {
              $('.tldr-button-play').hide();
              return $('.tldr-button-pause').show();
            },
            pause: function() {
              $('.tldr-button-play').hide();
              return $('.tldr-button-pause').show();
            },
            stop: function() {
              $('.tldr-button-play').show();
              return $('.tldr-button-pause').hide();
            },
            progress: function(state) {
              var complete;
              complete = state.location / state.duration;
              return console.log('progress', state, complete);
              /*
                            total_width = $( "#tldr-scrubber" ).outerWidth()
                            if false is isNaN complete
                              width = Math.floor( complete * total_width )
                              $( "#tldr-scrubber-bar-left-loaded" ).css( 'width', Math.floor( width ) + 'px' )
                              try
                                end = video.buffered.end(0)
                                loaded_pixels = end - width
                                $("#tldr-scrubber-bar-right-loaded").width( loaded_pixels + 'px');
                              catch error
                                #TODO: do something
                                #console.log( 'no buffering avail', error )
              */

            }
          });
        });
        if (true === isEditing()) {
          return populateNarrative(id);
        }
      });
    } else if (Meteor.isServer) {
      return Meteor.publish("stories", function() {
        return Stories.find({}, {
          fields: {
            _id: 1,
            token: 1,
            modified: 1,
            narratives: 1,
            url: 'https://s3.amazonaws.com/hazy.co/sky.mov'
          }
        });
      });
    }
  });

  currentId = function() {
    return document.location.pathname.replace(/^\//, '');
  };

  currentMode = function() {
    return document.location.hash.replace(/^#/, '');
  };

  getStories = function() {
    return Stories.find().fetch();
  };

  countStories = function() {
    return Stories.find().fetch().length;
  };

  loadStory = function(id, fn) {
    var story;
    story = getStory(id);
    if (null === story) {
      story = createStory(id);
    }
    if ('function' === typeof fn) {
      fn(story);
    }
    return story;
  };

  getStory = function(id) {
    var story;
    story = Stories.find({
      token: id
    }).fetch();
    if ('undefined' === typeof story) {
      story = null;
    } else if (null !== story) {
      story = story[0] || null;
    }
    return story;
  };

  createStory = function(id) {
    var story;
    story = Stories.insert({
      token: id,
      modified: new Date(),
      url: 'https://s3.amazonaws.com/hazy.co/sky.mov',
      narratives: []
    });
    if ('undefined' === typeof story) {
      story = null;
    } else {
      story = Stories.find({
        token: id
      }).fetch()[0];
    }
    return story;
  };

  populateNarrative = function(id) {};

  if (Meteor.isClient) {
    isEditing = function() {
      return 'edit' === currentMode();
    };
    createGrid = function(url) {
      var hexgrid;
      hexgrid = new Hexgrid({
        id: "tldr-canvases",
        side: 10,
        fill: "transparent",
        line: {
          width: 1,
          color: 'rgba(0,0,0,.05)'
        },
        video: {
          src: url,
          x: 0,
          y: 0
        },
        onclick: function(obj) {},
        onmouseout: function(obj) {
          var api, hex;
          api = obj.api;
          return hex = obj.data;
        },
        onmouseover: function(obj) {
          var api, hex;
          api = obj.api;
          return hex = obj.data;
        },
        ondrawn: function(obj) {
          var api, hex;
          api = obj.api;
          return hex = obj.data;
        }
      });
      return hexgrid;
    };
    doAnim = function(node, prop, fn) {
      return $(node).animate(prop, {
        duration: 300,
        specialEasing: {
          width: 'linear',
          height: 'easeOutBounce'
        },
        complete: function() {
          if ('function' === typeof fn) {
            return fn();
          }
        }
      });
    };
    hidePanel = function() {
      var node;
      node = $("#tldr-panel-container");
      node.hide();
      return doAnim(node, {
        'margin-right': '-1000px'
      }, function() {
        return $('.tldr-button-edit-cancel').addClass('tldr-button-edit').removeClass('tldr-button-edit-cancel').removeClass('ss-writingdisabled').addClass('ss-write');
      });
    };
    showPanel = function() {
      var node;
      node = $("#tldr-panel-container");
      node.show();
      return doAnim(node, {
        'margin-right': '0px'
      }, function() {
        return $('.tldr-button-edit').removeClass('tldr-button-edit').addClass('tldr-button-edit-cancel').addClass('ss-writingdisabled').removeClass('ss-write');
      });
    };
    showNarrative = function() {
      var node;
      node = $("#tldr-narrative-container");
      node.show();
      $("#tldr-panel-container").hide();
      return doAnim(node, {
        'margin-right': '0px'
      }, function() {
        return $('.tldr-button-narrative').removeClass('tldr-button-narrative').addClass('tldr-button-narrative-cancel').text('notebook');
      });
    };
    hideNarrative = function() {
      var node;
      node = $("#tldr-narrative-container");
      node.hide();
      return doAnim(node, {
        'margin-right': '-2000px'
      }, function() {
        return $('.tldr-button-narrative-cancel').addClass('tldr-button-narrative').removeClass('tldr-button-narrative-cancel').text('openbook');
      });
    };
    showMedia = function() {
      var node;
      node = $("#tldr-media-container");
      node.show();
      return doAnim(node, {
        'margin-right': '0px'
      }, function() {
        return $('.tldr-button-media').removeClass('tldr-button-media').addClass('tldr-button-media-cancel').text('writingdisabled');
      });
    };
    hideMedia = function() {
      var node;
      node = $("#tldr-media-container");
      node.hide();
      return doAnim(node, {
        'margin-right': '-2000px'
      }, function() {
        return $('.tldr-button-media-cancel').addClass('tldr-button-media').removeClass('tldr-button-media-cancel').text('write');
      });
    };
    showSettings = function() {
      var node;
      node = $("#tldr-settings-container");
      node.show();
      return doAnim(node, {
        'margin-right': '0px'
      }, function() {
        $('.tldr-button-settings').removeClass('tldr-button-settings').addClass('tldr-button-settings-cancel').text('checkmark').addClass('tldr-button-green');
        return $("#tldr-middle-content-panel").fadeIn();
      });
    };
    hideSettings = function() {
      var node;
      node = $("#tldr-settings-container");
      node.hide();
      return doAnim(node, {
        'margin-right': '-3000px'
      }, function() {
        $('.tldr-button-settings-cancel').addClass('tldr-button-settings').removeClass('tldr-button-settings-cancel').text('settings').removeClass('tldr-button-green');
        return $("#tldr-middle-content-panel").fadeOut();
      });
    };
    if (true === isEditing()) {
      Template.controls.events({
        "click .tldr-button-edit": function(e) {
          showPanel();
          hideNarrative();
          hideMedia();
          return hideSettings();
        }
      });
      Template.controls.events({
        "click .tldr-button-edit-cancel": function(e) {
          return hidePanel();
        }
      });
      Template.controls.events({
        "click .tldr-button-narrative": function(e) {
          showNarrative();
          hidePanel();
          hideMedia();
          return hideSettings();
        }
      });
      Template.controls.events({
        "click .tldr-button-narrative-cancel": function(e) {
          return hideNarrative();
        }
      });
      Template.controls.events({
        "click .tldr-button-media": function(e) {
          showMedia();
          hideNarrative();
          hidePanel();
          return hideSettings();
        }
      });
      Template.controls.events({
        "click .tldr-button-media-cancel": function(e) {
          return hideMedia();
        }
      });
      Template.controls.events({
        "click .tldr-button-settings": function(e) {
          showSettings();
          hideNarrative();
          hideMedia();
          return hidePanel();
        }
      });
      Template.controls.events({
        "click .tldr-button-settings-cancel": function(e) {
          return hideSettings();
        }
      });
      Template.toolbar.events({
        "keydown .tldr-title": function(e) {
          var regex, story, url;
          story = Session.get('story');
          url = $("#tldr-controls-spacer-title").val();
          story.url = url;
          Stories.update({
            _id: Session.get('story')['_id']
          }, story);
          Session.set('story', story);
          regex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi;
          if (null === url.match(regex)) {
            $('.tldr-controls-spacer-title-icon').css('color', '#660000');
            return $('#tldr-controls-spacer-title').css('color', '#660000');
          } else {
            $('.tldr-controls-spacer-title-icon').css('color', 'rgb(255, 255, 255)');
            return $('#tldr-controls-spacer-title').css('color', 'rgb(255, 255, 255)');
          }
        }
      });
      Template.toolbar.events({
        "focusin .tldr-title": function(e) {
          if ('rgb(204, 204, 204)' === $('.tldr-controls-spacer-title-icon').css('color')) {
            $('.tldr-controls-spacer-title-icon').css('color', 'rgb(255, 255, 255)');
            return $('#tldr-controls-spacer-title').css('color', 'rgb(255, 255, 255)');
          }
        }
      });
      Template.toolbar.events({
        "focusout .tldr-title": function(e) {
          if ('rgb(255, 255, 255)' === $('.tldr-controls-spacer-title-icon').css('color')) {
            $('.tldr-controls-spacer-title-icon').css('color', 'rgb(204, 204, 204)');
            return $('#tldr-controls-spacer-title').css('color', 'rgb(204, 204, 204)');
          }
        }
      });
      Template.footer.events({
        "click .tldr-button-bookmark": function(e) {
          var bookmark, story, video;
          video = that.video.media();
          bookmark = {
            total: video.duration,
            location: video.currentTime,
            created: new Date().getTime()
          };
          story = Session.get('story');
          story.narratives = story.narratives || [];
          story.narratives.push(bookmark);
          Stories.update({
            _id: story['_id']
          }, story);
          return Session.set('story', story);
        }
      });
      Template.narrative.events({
        "click .tldr-narrative-item": function(e) {
          var el$, percentage;
          el$ = $(e.target);
          if (el$.hasClass('tldr-narrative-text' || el$.hasClass('tldr-narrative-icon'))) {
            el$ = el$.parent();
          }
          percentage = el$.data('percentage');
          return that.video.skip(percentage, function() {
            return console.log('skip complete', percentage);
          });
        }
      });
      Template.footer.events({
        "click #tldr-scrubber": function(e) {
          var offset, percentage, pixels, width;
          offset = $("#tldr-scrubber").offset();
          width = $("#tldr-scrubber").outerWidth();
          pixels = e.clientX - offset.left;
          percentage = pixels / width;
          $("#tldr-scrubber-bar-left").width((percentage * width) - (.5 * ($("#tldr-scrubber-knob-container").outerWidth())));
          return that.video.skip(percentage);
        }
      });
      Template.narrative.pretty_timestamp = function() {
        return timestampToPrettyDate(this.location);
      };
      Template.narrative.percentage = function() {
        return this.location / this.total;
      };
      Template.narratives.narratives = function() {
        if ('undefined' !== typeof Session.get('story')) {
          return Session.get('story')['narratives'];
        } else {
          return [];
        }
      };
      Template.scrubber.events({
        "click .tldr-button-play": function(e) {
          return that.video.play();
        }
      });
      Template.scrubber.events({
        "click .tldr-button-pause": function(e) {
          return that.video.pause();
        }
      });
      Template.scrubber.events({
        "click .tldr-button-stop": function(e) {
          return that.video.stop();
        }
      });
    }
  }

}).call(this);
